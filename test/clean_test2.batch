; Fix IDL to supress the '% Compiled module ...' messages
compile_opt idl2, /Hidden

; Start timer
t_start = systime(1)

; Startup batch files to define the ALFALFA routines
@wasinit2
@alfinit

; PROs used for testing and reporting errors
.comp comp_test
comp_test, 'link_test'
comp_test, 'beam_test'

; Test Counters
test_pass = 0
test_fail = 0

; Tests for linking IDL routine names with the C module
print,'External Library Linking'
block_pass = 0
blocK_fail = 0

link_file = agcdir+'../deconvolution/clean_tools.so'
link_test, link_file, 'build_beam_worker', 6, 6, Pass=Pass, Fail=Fail
  block_pass = block_pass+Pass
  block_fail = block_fail+Fail
linK_test, link_file, 'alfa_clean_worker', 13, 13, Pass=Pass, Fail=Fail
  block_pass = block_pass+Pass
  block_fail = block_fail+Fail
linK_test, link_file, 'lib_version', 1, 0, Pass=Pass, Fail=Fail
  block_pass = block_pass+Pass
  block_fail = block_fail+Fail

block_totl = block_pass + block_fail
print,'> Tests Passed: '+string(block_pass, Format='(I2)')+' of '+strtrim(string(block_totl),2)+ $
	' ('+string(100.0*block_pass/block_totl, Format='(F5.1)')+'%)'
print,'> Tests Failed: '+string(block_fail, Format='(I2)')+' of '+strtrim(string(block_totl),2)+ $
	' ('+string(100.0*block_fail/block_totl, Format='(F5.1)')+'%)'
print,'--'

test_pass = test_pass + block_pass
test_fail = test_fail + block_fail

; Compile tests for the supporting IDL PROs
print,'Procedure Compiling'
;+ Backend 
block_pass = 0
blocK_fail = 0

comp_test, 'build_beam5', Pass=Pass, Fail=Fail
  block_pass = block_pass+Pass
  block_fail = block_fail+Fail
comp_test, 'build_beam_grid2', Pass=Pass, Fail=Fail
  block_pass = block_pass+Pass
  block_fail = block_fail+Fail
comp_test, 'alfa_clean7', Pass=Pass, Fail=Fail
  block_pass = block_pass+Pass
  block_fail = block_fail+Fail
comp_test, 'robust_sigma', Pass=Pass, Fail=Fail
  block_pass = block_pass+Pass
  block_fail = block_fail+Fail

;+ Frontend
comp_test, 'gridview2', Pass=Pass, Fail=Fail
  block_pass = block_pass+Pass
  block_fail = block_fail+Fail
comp_test, 'cleanview', Pass=Pass, Fail=Fail
  block_pass = block_pass+Pass
  block_fail = block_fail+Fail
comp_test, 'beamview', Pass=Pass, Fail=Fail
  block_pass = block_pass+Pass
  block_fail = block_fail+Fail
comp_test, 'fieldview', Pass=Pass, Fail=Fail
  block_pass = block_pass+Pass
  block_fail = block_fail+Fail
comp_test, 'cleanflux', Pass=Pass, Fail=Fail
  block_pass = block_pass+Pass
  block_fail = block_fail+Fail

block_totl = block_pass + block_fail
print,'> Tests Passed: '+string(block_pass, Format='(I2)')+' of '+strtrim(string(block_totl),2)+ $
	' ('+string(100.0*block_pass/block_totl, Format='(F5.1)')+'%)'
print,'> Tests Failed: '+string(block_fail, Format='(I2)')+' of '+strtrim(string(block_totl),2)+ $
	' ('+string(100.0*block_fail/block_totl, Format='(F5.1)')+'%)'
print,'--'

test_pass = test_pass + block_pass
test_fail = test_fail + block_fail

; Beam Building Test - Uses standard test set (Beam size of 25' only)
print,'Beam Shape and Scaling'
block_pass = 0
blocK_fail = 0

restore, 'test/grid_test.sav'
beam_test, grid, Pass=Pass, Fail=Fail, /Extended
  block_pass = block_pass+Pass
  block_fail = block_fail+Fail

block_totl = block_pass + block_fail
print,'> Tests Passed: '+string(block_pass, Format='(I2)')+' of '+strtrim(string(block_totl),2)+ $
	' ('+string(100.0*block_pass/block_totl, Format='(F5.1)')+'%)'
print,'> Tests Failed: '+string(block_fail, Format='(I2)')+' of '+strtrim(string(block_totl),2)+ $
	' ('+string(100.0*block_fail/block_totl, Format='(F5.1)')+'%)'
print,'--'

test_pass = test_pass+Pass
test_fail = test_fail+Fail

test_totl = test_pass + test_fail
print,' '
print,'Summary of All Tests'
print,'Tests Passed: '+string(test_pass, Format='(I2)')+' of '+strtrim(string(test_totl),2)+ $
	' ('+string(100.0*test_pass/test_totl, Format='(F5.1)')+'%)'
print,'Tests Failed: '+string(test_fail, Format='(I2)')+' of '+strtrim(string(test_totl),2)+ $
	' ('+string(100.0*test_fail/test_totl, Format='(F5.1)')+'%)'
print,'--'

; Stop Timer
t_stop = systime(1)
print,' '
print,'Used '+string(t_stop-t_start, Format='(F0.2)')+' seconds'
print,'--'

; Close out IDL.  By doing this we don't depend on having an IDL 
; version that that accepts the -e flag. 
exit, status=0